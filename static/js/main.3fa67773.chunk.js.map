{"version":3,"sources":["services/api.js","helpers/index.js","pages/Login.js","components/List.js","pages/Home.js","components/UnauthenticatedRoute.js","components/AuthenticatedRoute.js","components/App.js","reportWebVitals.js","index.js"],"names":["Client","TOKEN","sessionStorage","getItem","_client","Axios","create","baseURL","process","withCredentials","getLists","a","source","get","cancelToken","token","params","response","status","data","console","log","addListItem","listId","newItem","post","removeListItem","itemIndex","delete","deleteList","createList","users","login","pickRandomFromList","id","isEmpty","x","undefined","Login","history","useHistory","React","useState","user","setUser","password","setPassword","isLoading","setIsLoading","logginError","setLogginError","errorMessage","setErrorMessage","handleSubmit","e","preventDefault","setItem","push","Error","Container","Row","className","Col","xs","md","Card","Body","Form","onSubmit","Group","controlId","Label","Control","required","onChange","target","value","type","placeholder","Button","disabled","length","variant","Alert","dismissible","onClose","List","props","apiclient","handleDeleteList","model","title","items","showItemForm","showRandomItem","randomItem","itemFormValues","url","listState","setListState","handleAddItemToList","Array","isArray","handleRemoveItemFromList","elementIndex","newArray","filter","item","index","selectRandomItemFromList","Modal","show","onHide","Header","closeButton","Title","Footer","onClick","map","rel","href","Badge","cursor","size","icon","ButtonGroup","Home","apiClient","lists","showListForm","newListName","homeState","setHomeState","result","handleNewList","useEffect","axios","CancelToken","fetchData","cancel","removeItem","sm","UnauthenticatedRoute","children","rest","to","AuthenticatedRoute","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","fas","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fa67773.chunk.js","sourcesContent":["import Axios from 'axios';\r\n\r\nconst Client = () => {\r\n    const TOKEN = sessionStorage.getItem('token');\r\n\r\n    const _client = Axios.create({\r\n        baseURL: process.env.REACT_APP_API_HOST,\r\n        withCredentials: false\r\n    })\r\n\r\n    let getLists = async (source = false) => {        \r\n        try {\r\n            let response = await _client.get('', {cancelToken: source.token, params: {token: TOKEN}});            \r\n            if (response.status === 200) {\r\n                return response.data;\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    let addListItem = async (listId, newItem) => {\r\n        try {\r\n            let response = await _client.post(`lists/${listId}/items/`, newItem);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        return false;\r\n    };\r\n    \r\n    let removeListItem = async (listId, itemIndex) => {\r\n        try {\r\n            let response = await _client.delete(`lists/${listId}/items/${itemIndex}`);\r\n            return response.status;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    let deleteList = async (listId) => {\r\n        try {\r\n            let response = await _client.delete(`lists/${listId}/`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    let createList = async (data) => {\r\n        data.users = [TOKEN];\r\n        console.log(data);\r\n        try {\r\n            let response = await _client.post('lists/', data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    let login = async (data) => {\r\n        try {\r\n            let response = await _client.post('login/', data);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        return false;\r\n    }\r\n    let pickRandomFromList = async (id) => {\r\n        try {\r\n            let response = await _client.get('shuffle/'+id);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n\r\n    return {\r\n        getLists,\r\n        addListItem,\r\n        removeListItem,\r\n        deleteList,\r\n        createList,\r\n        login,\r\n        pickRandomFromList\r\n    };\r\n};\r\n\r\nexport default Client;","/**\r\n * checks if variable is undefined or null or false value\r\n * @param {*} x\r\n */\r\nexport const isEmpty = (x) => {\r\n    return x === undefined || x === null || !x;\r\n}","import React from 'react';\r\nimport Client from '../services/api';\r\nimport { Container, Row, Col, Card, Form, Button, Alert } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { isEmpty } from '../helpers';\r\n\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const [user, setUser] = React.useState('');\r\n  const [password, setPassword] = React.useState('');\r\n  const [isLoading, setIsLoading] = React.useState(false);\r\n  const [logginError, setLogginError] = React.useState(false);\r\n  const [errorMessage, setErrorMessage] = React.useState('');\r\n\r\n  const validateForm = () => user.length > 0 && password.length > 0;\r\n  \r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    try {      \r\n      let response = await Client().login({ user: user, password: password });      \r\n      if(!isEmpty(response.token)){\r\n        sessionStorage.setItem('token', response.token);        \r\n        history.push('/home');      \r\n      } else {\r\n        throw new Error('User not found');\r\n      }\r\n    } catch (error) {      \r\n      let message = 'An error occurred, please try again';\r\n      setErrorMessage(message);\r\n      setLogginError(true);\r\n      setIsLoading(false);\r\n    }        \r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <Row className=\"mt-5\">\r\n        <Col></Col>\r\n        <Col xs={10} md={6}>\r\n          <h1 id=\"login-title\" className=\"text-center mb-3\">Shuffle List</h1>\r\n          <Card className=\"mb-5\">\r\n            <Card.Body>\r\n              <Form onSubmit={ handleSubmit }>\r\n                <Form.Group controlId=\"user\">\r\n                  <Form.Label>user</Form.Label>\r\n                  <Form.Control\r\n                    required \r\n                    onChange={ e => setUser(e.target.value) } \r\n                    type=\"text\" \r\n                    placeholder=\"Enter user\" />\r\n                </Form.Group>\r\n                <Form.Group controlId=\"password\">\r\n                  <Form.Label>Password</Form.Label>\r\n                  <Form.Control\r\n                    required\r\n                    onChange={ e => setPassword(e.target.value) }\r\n                    type=\"password\" \r\n                    placeholder=\"Enter password\" />\r\n                </Form.Group>\r\n                <Button disabled={!validateForm()} className=\"mx-auto d-block large\" variant=\"primary\" type=\"submit\">\r\n                  { isLoading ? 'Loading...' : 'Login' }\r\n                </Button>\r\n              </Form>\r\n              { \r\n                logginError \r\n                ? \r\n                  <Alert \r\n                    variant='danger' \r\n                    className='mt-5' \r\n                    dismissible \r\n                    onClose={() => setLogginError(false) }>\r\n                      { errorMessage }\r\n                  </Alert> \r\n                : \r\n                  '' \r\n              }\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n        <Col></Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { Card, Button, ButtonGroup, Badge, Modal, Form } from 'react-bootstrap';\r\nimport Client from '../services/api';\r\nimport { isEmpty } from '../helpers';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst List = (props) => {\r\n    let apiclient = Client();\r\n\r\n    let { handleDeleteList } = props;\r\n    let  { title, items, id } = props.model;\r\n\r\n    const [listState, setListState] = React.useState({\r\n        items: items,\r\n        showItemForm: false,\r\n        showRandomItem: false,\r\n        randomItem: '',\r\n        itemFormValues: {title: '', url: ''}\r\n    });\r\n\r\n    const handleAddItemToList = async () => {\r\n        try {            \r\n            setListState({...listState, showItemForm: true})\r\n            let items = await apiclient.addListItem(id, listState.itemFormValues);\r\n            items = isEmpty(items) || !Array.isArray(items) ? [] : items;\r\n            setListState({...listState, items: items, showItemForm: false});            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }        \r\n    };\r\n    const handleRemoveItemFromList = async (elementIndex) => {\r\n        try {\r\n            let result = await apiclient.removeListItem(id, elementIndex);\r\n            if (result === 200) {\r\n                let newArray =  listState.items.filter((item, index) => { return index !== elementIndex })             \r\n                setListState({...listState, items: newArray});\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n    const selectRandomItemFromList = async (id) => {\r\n        try {\r\n            setListState({...listState, randomItem: ''});\r\n            let item = await apiclient.pickRandomFromList(id);            \r\n            setListState({...listState, randomItem: item.title, showRandomItem: true});            \r\n        } catch (error) {\r\n            console.log(error);\r\n        }        \r\n    }\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <Modal show={listState.showItemForm} onHide={ () => { setListState({...listState, showItemForm: false}) } }>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add Item</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form.Group controlId=\"title\">\r\n                        <Form.Label>Title</Form.Label>\r\n                        <Form.Control\r\n                            onChange={ e => setListState({...listState, itemFormValues: {...listState.itemFormValues, title: e.target.value}}) }\r\n                            type=\"text\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"url\">\r\n                        <Form.Label>Url</Form.Label>\r\n                        <Form.Control\r\n                            onChange={ e => setListState({...listState, itemFormValues: {...listState.itemFormValues, url: e.target.value}}) }                           \r\n                            type=\"text\" />\r\n                    </Form.Group>   \r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={ () => setListState({...listState, showItemForm: false}) }>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={ () => handleAddItemToList() }>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n            <Modal show={listState.showRandomItem} onHide={ () => setListState({...listState, showRandomItem: false}) }>\r\n                <Modal.Body closeButton>\r\n                    <h2 className=\"text-center m-3\">{ listState.randomItem }</h2>\r\n                </Modal.Body>                \r\n            </Modal>\r\n            <Card.Title className=\"pt-3 pl-3 pb-0\">{ title }</Card.Title>            \r\n            <Card.Body>                \r\n                { listState.items.map((item, index) => \r\n                {\r\n                    if (item.url) {\r\n                        return (<a rel=\"noreferrer\" target=\"_blank\" href={item.url} key={index}><Badge className=\"px-2 py-2 my-1 mx-1\" variant=\"info\">{item.title}&nbsp;<FontAwesomeIcon cursor=\"pointer\" onClick={ () => { handleRemoveItemFromList(index) } } className=\"ml-2 mr-1\" size=\"xs\" icon={ ['fas', 'trash'] } /></Badge></a>);\r\n                    }\r\n\r\n                    return (<Badge key={index} className=\"px-2 py-2 my-1 mx-1 text-break\" variant=\"dark\">{item.title}&nbsp;<FontAwesomeIcon cursor=\"pointer\" onClick={ () => { handleRemoveItemFromList(index) } } className=\"ml-2 mr-1\" size=\"xs\" icon={ ['fas', 'trash'] } /></Badge>)\r\n                }) }                \r\n            </Card.Body>\r\n            <Card.Footer>\r\n                <ButtonGroup>\r\n                    <Button onClick={ () => setListState({...listState, showItemForm: true}) } variant=\"primary\">\r\n                        <FontAwesomeIcon icon={ ['fas', 'plus'] }></FontAwesomeIcon>\r\n                    </Button>\r\n                    <Button onClick={ () => selectRandomItemFromList(id) } variant=\"success\">\r\n                        <FontAwesomeIcon icon={ ['fas', 'random'] } />\r\n                    </Button>\r\n                    <Button variant=\"danger\" onClick={ () => handleDeleteList(id) } >\r\n                        <FontAwesomeIcon icon={ ['fas', 'trash'] } />\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Card.Footer>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport List from '../components/List';\r\nimport { Container, Row, Col, Alert, Button, Modal, Form } from 'react-bootstrap';\r\nimport Client from '../services/api';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst Home = () => {\r\n  let history = useHistory();\r\n  const apiClient = Client();\r\n\r\n  const [homeState, setHomeState] = React.useState({\r\n    lists: [],\r\n    showListForm: false,\r\n    newListName: ''\r\n  });  \r\n\r\n  const handleDeleteList = async (listId) => {\r\n    try {\r\n        let result = await apiClient.deleteList(listId);\r\n        if (result !== undefined && result) {\r\n          setHomeState({...homeState, lists: homeState.lists.filter(item => item.id !== listId)});\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n  }\r\n  const handleNewList = async () => {\r\n    let title = homeState.newListName;\r\n    try {\r\n      if (title) {\r\n        let result = await apiClient.createList({title});      \r\n        if (result) {        \r\n          setHomeState({lists: [...homeState.lists, {id: result, title, items: []}]});\r\n        }\r\n      }      \r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n  const handleLogout = () => {\r\n    sessionStorage.removeItem('token');\r\n    history.push('/login');\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    const source = axios.CancelToken.source();\r\n    let fetchData = async () => {    \r\n      let data = await Client().getLists(source);\r\n      data = (Array.isArray(data)) ? data : [];\r\n      setHomeState({...homeState, lists: data});      \r\n    }\r\n    fetchData();\r\n    return () => { source.cancel() };\r\n  }, []);\r\n\r\n  return (\r\n    <Container className=\"mt-4 mb-5\">\r\n      <Modal show={homeState.showListForm} onHide={ () => { setHomeState({...homeState, showListForm: false}) } }>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>Add List</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n            <Form.Group controlId=\"title\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control\r\n                    onChange={ e => setHomeState({...homeState, newListName: e.target.value}) }\r\n                    type=\"text\" />\r\n            </Form.Group>              \r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={ () => setHomeState({...homeState, showListForm: false}) }>\r\n                Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={ () => handleNewList() }>\r\n                Save Changes\r\n            </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Row>\r\n        <Col xs={12} md={2}>\r\n          <Button onClick={ () => setHomeState({...homeState, showListForm: true}) } className=\"mt-3\" variant=\"success\">New List</Button>\r\n          <br></br>\r\n          <Button onClick={ () => handleLogout() } className=\"mt-3\" variant=\"danger\">Logout</Button>\r\n        </Col>\r\n        <Col xs={12} md={10}>\r\n          <Row>\r\n            { homeState.lists.map((item) => {\r\n              return (\r\n                <Col className=\"mb-3 mt-3\" key={item.id} xs={12} md={12} sm={12}>\r\n                  <List handleDeleteList={ handleDeleteList } model={item} />\r\n                </Col>\r\n              )\r\n            }) }\r\n            { homeState.lists.length > 0 \r\n              ? \"\" \r\n              : <Alert className=\"center mx-auto\" variant=\"danger\">\r\n                  No se han encontrado listas para mostrar\r\n                </Alert> \r\n            }\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { isEmpty } from '../helpers';\r\n\r\nconst UnauthenticatedRoute = ({ children, ...rest }) => {   \r\n    let token = sessionStorage.getItem('token');\r\n    return (\r\n        <Route {...rest}>\r\n            {\r\n                isEmpty(token)\r\n                ?\r\n                    (children)\r\n                :\r\n                    (<Redirect to=\"/home\" />)\r\n            }\r\n        </Route>     \r\n    );\r\n}\r\n\r\nexport default UnauthenticatedRoute;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { isEmpty } from '../helpers';\r\n\r\nconst AuthenticatedRoute = ({ children, ...rest }) => { \r\n\r\n    let token = sessionStorage.getItem('token');\r\n\r\n    return (\r\n        <Route {...rest}>\r\n            {\r\n                !isEmpty(token) && token\r\n                ?\r\n                    (children)\r\n                :\r\n                    (<Redirect to=\"/login\" />)\r\n            }\r\n        </Route>     \r\n    );\r\n}\r\n\r\nexport default AuthenticatedRoute;","import React from 'react';\nimport Login from '../pages/Login'\nimport { HashRouter as Router, Switch } from 'react-router-dom';\nimport Home from '../pages/Home';\nimport UnauthenticatedRoute from '../components/UnauthenticatedRoute';\nimport AuthenticatedRoute from '../components/AuthenticatedRoute';\nimport '../styles/App.css';\n\nconst App = () => {\n  return (\n    <Router>      \n      <Switch>        \n        <UnauthenticatedRoute exact path={ ['/', '/login'] }>          \n          <Login />\n        </UnauthenticatedRoute>\n        <AuthenticatedRoute exact path=\"/home\">\n          <Home />\n        </AuthenticatedRoute>\n      </Switch>\n    </Router>    \n  )\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { library } from '@fortawesome/fontawesome-svg-core'; \r\nimport { fas } from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(fas);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />   \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}